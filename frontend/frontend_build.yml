stages:
  - build
  - test
  - release
  - notify
  - deploy

variables:
  VERSION: 1.0.{$CI_PIPELINE_ID}

build-frontend-image:
  stage: build
  image: docker:20.10.12-dind-rootless
  before_script:
    - until docker info; do sleep 1; done
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - cd frontend
    - >
      docker build
      --build-arg VERSION=$VERSION
      --tag $CI_REGISTRY_IMAGE/project-frontend:$VERSION
      .
    - docker push $CI_REGISTRY_IMAGE/project-frontend:$VERSION

sonarqube-frontend-sast:
  stage: test
  image: sonarsource/sonar-scanner-cli:latest
  needs: []
  script:
    - cd frontend
    - >
      sonar-scanner -Dsonar.qualitygate.wait=true
      -Dsonar.projectKey="${SONAR_FRONTEND_PROJECT_KEY}"
      -Dsonar.sources=.
      -Dsonar.host.url="${SONAR_URL}"
      -Dsonar.login="${SONAR_FRONTEND_TOKEN}"
      -Dsonar.qualitygate.wait=false

go-test:
  stage: test
  rules:
    - changes:
        - backend/*
  image: golang:1.17.13-bullseye
  script:
    - cd backend
    - go test -v ./...

release-frontend-image-latest:
  variables:
    GIT_STRATEGY: none
  image: docker:20.10.12-dind-rootless
  stage: release
  before_script:
    - until docker info; do sleep 1; done
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker pull $CI_REGISTRY_IMAGE/project-frontend:$VERSION
    - docker tag $CI_REGISTRY_IMAGE/project-frontend:$VERSION $CI_REGISTRY_IMAGE/project-frontend:latest
    - docker push $CI_REGISTRY_IMAGE/project-frontend:latest

release-frontend-helm-chart:
  stage: release
  image: alpine/helm:latest
  script:
    - cd infrastructure/helm
    - sed -i "s/{{TAG}}/$VERSION/" project-otus/charts/frontend/values.yaml
    - sed -i "s/{{VERSION}}/$VERSION/" project-otus/charts/frontend/Chart.yaml
    - helm package  project-otus/charts/frontend/ --version ${VERSION}



deploy-k8s:
  stage: prodactiom
  when: manual
  rules:
    - changes:
        - backend/*
  needs:
    - build-image
  environment:
    name: production-backend
  image:
    name: alpine/k8s:1.24.13
  before_script:
    - mkdir ~/.kube
    - echo ${KUBECONFIG} > ~/.kube/config
  script:
    - |
      kubectl config use-context yc-k8s-zonal-admin --namespace=default


  after_script:
    - rm ~/.kube/config
